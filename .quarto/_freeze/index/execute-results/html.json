{
  "hash": "e801f786618627ada859ebba452d19ab",
  "result": {
    "markdown": "---\ntitle: \"**<b style = 'color : #E18B2A;'>Taller de Investigación: Política Cuantitativa “CUANTIPOL” - UNMSM</b>**\"\nauthor:  Joel Belsasar\nsubtitle: Introducción `ggplot2`\ndate: 4/06/2023\nformat:\n  revealjs:\n    self-contained: true\n    standalone: true\n    theme: night\n    progress: true\n    footer: <[Cuantipol](https://taller-unmsm-cuantipol-2023.github.io/Guia-instalacion-R/)>\nincremental: false\nhighlight-style: a11y\n---\n\n\n##\n\n\n::: {.cell}\n::: {.cell-output-display}\n![[Whole game: Visualización](https://r4ds.hadley.nz/whole-game#fig-ds-whole-game)\n](./diagrams/whole-game.png){#fig-ds-whole-game fig-alt='A diagram displaying the data science cycle: Import -> Tidy ->\nUnderstand  (which has the phases Transform -> Visualize -> Model in a\ncycle) -> Communicate. Surrounding all of these is Program\nImport, Tidy, Transform, and Visualize is highlighted.' width=535}\n:::\n:::\n\n\n##\n\nVisualizar\nGenerar visualizaciones no es solamente \"hacer un gráfico lindo\"\n\nEs mas que eso, implica comunicar una idea, una información, un dato, de manera clara y lo mas precisa posible.\n\nEl objetivo de esta parte no es solo aprender como armar un gráfico bien presentado, sino también entender cómo pensar en los inputs que necesito para lo que quiero comunicar y cuál es la mejor manera de expresarlo.\n\nComo toda buena idea, vamos a ir de lo general a lo específico, definiendo primero la base y puliendo a cada paso.\n\nVamos a graficar en forma de cascada\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Bibliografía:\n\nWickham, H., Navarro, D., & Lin, T. (2009). *ggplot2. Elegant Graphics for Data Analysis * (3ª ed.). Springer. [https://ggplot2-book.org/](https://ggplot2-book.org/)\n\nWickham, H. (2010). *A Layered Grammar of Graphics*. Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28. [](https://vita.had.co.nz/papers/layered-grammar.pdf)\n\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). *R for Data Science. Import, Tidy, Transform, Visualize, and Model Data* (2ª ed.). O'Reilly Media, Inc. [https://r4ds.hadley.nz/](https://r4ds.hadley.nz/)\n\n\n\n##\nCrear presentaciones (PPT):\n\n[Revealjs](https://quarto.org/docs/presentations/revealjs/)\n[Advanced Reveal](https://quarto.org/docs/presentations/revealjs/advanced.html)\n[Revealjs Options](https://quarto.org/docs/reference/formats/presentations/revealjs.html)\n[Revealjs Plugins](https://quarto.org/docs/extensions/revealjs.html)\n\n\n[]()\n[]()\n[]()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}